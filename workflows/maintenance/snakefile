"""
Oultine
-------
0. Fit cancer-driver splicing events
1. Select cancer-driver splicing events models
2. Combine selected models
"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
DATA_DIR = os.path.join(ROOT,'data')
PREP_DIR = os.path.join(DATA_DIR,'prep')
FITTED_DIR = os.path.join(DATA_DIR,'fitted')
REFERENCES_DIR = os.path.join(DATA_DIR,'references')
TS_DIR = ROOT
EVENT_TYPES = ['EX']

CANCER_TYPES = [
    'BRCA',
    'COAD',
    'GBM',
    'HNSC',
    'KICH',
    'KIRC',
    'KIRP',
    'LGG',
    'LIHC',
    'LUAD',
    'LUSC',
    'PRAD',
    'READ',
    'THCA',
    'UCEC',
    'UCS'
]


##### RULES #####
rule all:
    input:       
        # filter model parameters to consider only selected models
        os.path.join(FITTED_DIR,'splicing_dependency','coefs_splicing.pickle.gz'),
        os.path.join(FITTED_DIR,'splicing_dependency','coefs_genexpr.pickle.gz'),
        os.path.join(FITTED_DIR,'splicing_dependency','coefs_intercept.pickle.gz'),
        
        # one-sample diff fitting
        expand(os.path.join(FITTED_DIR,'onesample_diff','TCGA','{cancer}'), cancer=["KICH","UCEC"])#CANCER_TYPES)
        
                
rule filter_selected_models:
    input:
        fitted_models_dir = [os.path.join(FITTED_DIR,'splicing_dependency','models_gene_dependency-{event_type}').format(event_type=e) for e in EVENT_TYPES],
        selected_models = os.path.join(FITTED_DIR,'splicing_dependency','selected_models-EX.txt')
    output:
        coefs_splicing = os.path.join(FITTED_DIR,'splicing_dependency','coefs_splicing.pickle.gz'),
        coefs_genexpr = os.path.join(FITTED_DIR,'splicing_dependency','coefs_genexpr.pickle.gz'),
        coefs_intercept = os.path.join(FITTED_DIR,'splicing_dependency','coefs_intercept.pickle.gz')
    run:
        import os
        import pandas as pd
        
        # load selected models
        selected_models = pd.read_table(input.selected_models, header=None)[0].to_list()
        coefs_splicings = []
        coefs_genexprs = []
        coefs_intercepts = []
        
        # filter raw coefficients
        for d in input.fitted_models_dir:
            coefs_splicing = pd.read_pickle(os.path.join(d,'coefs_splicing.pickle.gz'))
            coefs_genexpr = pd.read_pickle(os.path.join(d,'coefs_genexpr.pickle.gz'))
            coefs_intercept = pd.read_pickle(os.path.join(d,'coefs_intercept.pickle.gz'))
            
            coefs_splicing = coefs_splicing.loc[coefs_splicing['EVENT'].isin(selected_models)]
            coefs_genexpr = coefs_genexpr.loc[coefs_genexpr['EVENT'].isin(selected_models)]
            coefs_intercept = coefs_intercept.loc[coefs_intercept['EVENT'].isin(selected_models)]
            
            coefs_splicings.append(coefs_splicing)
            coefs_genexprs.append(coefs_genexpr)
            coefs_intercepts.append(coefs_intercept)
            
            del coefs_splicing, coefs_genexpr, coefs_intercept
            
        coefs_splicings = pd.concat(coefs_splicings)
        coefs_genexprs = pd.concat(coefs_genexprs)
        coefs_intercepts = pd.concat(coefs_intercepts)
        
        # save
        coefs_splicings.to_pickle(output.coefs_splicing)
        coefs_genexprs.to_pickle(output.coefs_genexpr)
        coefs_intercepts.to_pickle(output.coefs_intercept)
        
        print("Done!")
        
        
rule fit_onesample_diff:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','{cancer}.tsv'),
        metadata = os.path.join(PREP_DIR,'metadata','{cancer}.tsv')
    output:
        directory(os.path.join(FITTED_DIR,'onesample_diff','TCGA','{cancer}'))
    params:
        script_dir = TS_DIR,
        sample_col = "sampleID",
        comparison_col = "sample_type",
        condition_oi = "Primary Tumor",
        condition_ref = "Solid Tissue Normal"
    threads: 5
    shell:
        """
        python {params.script_dir}/target_spotter onediff_fit \
                --data_file={input.psi} \
                --metadata_file={input.metadata} \
                --sample_col={params.sample_col} \
                --comparison_col={params.comparison_col} \
                --condition_oi="{params.condition_oi}" \
                --condition_ref="{params.condition_ref}" \
                --output_dir={output} \
                --n_jobs={threads}
        """
